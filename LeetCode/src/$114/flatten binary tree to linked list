Given a binary tree, flatten it to a linked list in-place.

For example,
Given
         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
             
题目的大意是，给定一个二叉树，将其转化成一个单向链表。

从上面的例子，我们可以看出，对于一个节点，如果它同时存在左右孩子，那么就要想办法将右孩子暂时存起来，
然后用左孩子来代替右孩子。例如对于节点1，我们将节点5先存起来，将节点2放在节点1的右孩子位置。当我们
处理节点2的时候，又需要将节点4存起来，将节点3放在右孩子的位置，以此类推。那么用什么结构存储这些原先
的右孩子们呢？我们可以看到，节点5其实是被先存储的，节点4是被后存储的，但从最后的结果我们看到，4反而
比5更先出现，那么我们就可以用一个栈来存放这些节点。

//插入方法flatten()