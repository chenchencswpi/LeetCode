Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

给定一个二叉树的前序遍历和中序遍历，将这个二叉树构建出来。

首先我们来看看这两种遍历的特性。前序遍历是指当我们遍历一个二叉树的时候，先访问父节点，再访问左孩子，最后访问右孩子。
中序遍历是先访问左孩子，然后访问父节点，最后访问右孩子。例如这个例子：
 		 1
        / \
       2   5
      / \   \
     3   4   6
那么前序遍历的结果是：1，2，3，4，5，6；中序遍历的结果是3，2，4，1，5，6.那么前序遍历有什么特点呢？那就是对于每个
子树，其根节点都在第一位，例如根为2的子树，2在3和4之前，根为5的子树，5在6之前。中序遍历的特点是，每个子树的根节点
永远在左子树和右子树之间。那么怎么构建这个二叉树呢？我们每次先去前序遍历里确定根节点，然后在中序遍历中找到根节点的位置，
那么根节点的左子树就在中序遍历的开头到根节点位置-1，右子树就在中序遍历根节点位置+1到终点。也就是说，用前序遍历不断确定
每个子树的根节点，然后用中序遍历不断的narrow down左子树和右子树的取值区间。例如上面的例子，我们先确定根节点为1，那么
在中序遍历中找到了1后，1的左子树有3个节点，分别是3，2，4，那么在这个左子树里面，2又是根节点...以此类推。好了大家看代码：

//插入方法buildTree(), constructNode(), findIndex()