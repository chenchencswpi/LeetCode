Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
         
这道题是让我们克隆一个图。我们既可以用BFS，也可以用DFS来实现。首先我们看如何用BFS来解决。既然是克隆，那么每个节点只能被克隆
一次，所以我们需要track目前都克隆了哪些节点。我们可以用一个哈希表，key是老图里面的node，value是新图里面的新node。如果一个
老图里的节点出现在哈希表里，就证明已经被克隆过了。当然克隆还有另一个很重要的步骤就是把该节点的邻居们也要克隆进去。代码如下：

//插入方法cloneGraphBFS()

DFS的实现方法也是差不多的，同样也是用一个哈希表来存储所有的被克隆的节点。

//插入方法cloneGraphDFS()和dfs()