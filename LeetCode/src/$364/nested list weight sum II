Given a nested list of integers, return the sum of all integers in the list weighted by their depth.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Different from the previous question where weight is increasing from root to leaf, now the weight 
is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers 
have the largest weight.

Example 1:
Given the list [[1,1],2,[1,1]], return 8. (four 1's at depth 1, one 2 at depth 2)

Example 2:
Given the list [1,[4,[6]]], return 17. (one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 
1*3 + 4*2 + 6*1 = 17)

这道题和摆渡翁带你刷leetcode第339题很像，但不同的是，每层给的权重正好相反。在这道题里，越是外层，权重越大。这样导致的问题就是
我们没法直接去确定每个element的权重到底是多少，所以我们得先处理一下才能计算最终结果。怎么个最终处理法呢？我们可以先将所有的元素
按层存放，然后再一层一层遍历所有元素，施加相应权重。

//插入方法depthSumInverseDFS()和process()

上面这种dfs方法其实还有optimization，就是对于每一层，我们没必要把每个元素存起来，而是将它们的和存起来就ok了。因为a*i + b*i
不就等与(a + b) * i嘛。还有一种bfs的做法，非常的简洁，但也不是很好想出来。我们仔细分析一下,例如上面的例子[1,[4,[6]]]，最终
的结果是1*3 + 4*2 + 6*1，其实说白了1*3就是1+1+1，也就是说，最外层的1被加了3次。那么在做这道题的时候，每当我们剥开一层的时候，
我们讲前几层的所有element再加一次就好了。例如剥开4这层的时候，再加一次1，剥开6这层的时候，再加一次1和4。代码实现如下：

//插入方法depthSumInverseBFS()