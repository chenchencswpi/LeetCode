Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n 
that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?

给我们一个整形数组和一个目标值，让我们找出一个三元组，使得nums[i] + nums[j] + nums[k] < target并且0 <= i < j < k < n。

brute force方法就是每次固定前两个元素，然后去遍历数组找出第三个，但时间复杂度需要O(n3)。那既然题目只要求我们返回有多少个这样的三元组，
那我们就不用保留数组的顺序了。我们可以将数组进行排序，然后每次固定第一个元素，再用双指针的方法去找剩下的两个。

//插入方法threeSumSmaller()