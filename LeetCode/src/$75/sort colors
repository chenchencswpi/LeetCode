Given an array with n objects colored red, white or blue, sort them so that objects of the same color 
are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note:
You are not suppose to use the library's sort function for this problem.

Follow up:
A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, 
then 1's and followed by 2's.

Could you come up with an one-pass algorithm using only constant space?

给我们一个数组，里面有n个物体被涂上了红色，白色，和蓝色。现在对数组进行排序，要求相同颜色的物体必须挨在一起，并且红色在前，然后是白色，
最后是蓝色。

题目的做法较多但是follow up里面提到我们能不能只遍历一次，并且只能用常量空间。那么我们就要维护三个指针。假定我们已经有一部分数组排好序了，然后
三个指针，我们分别叫他们红指针，白指针和蓝指针。它们分别指向红色区域的最后一个位置，白色区域的最后一个位置，以及蓝色区域的最后一个位置。那么当读到
下一个元素为蓝色的时候，只要扩张蓝色区域即可，也就是蓝指针往后走一位。那么如果是白色，那蓝指针先走以为，然后白指针再走一位，这样做就能保证白色区域
既能扩张，也不会损失到蓝色区域。同理，如果下一位是红色，那么先让蓝指针和白指针各走一位，然后再走红指针。

//插入方法sortColors()