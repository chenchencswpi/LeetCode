Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

For example:
"112358" is an additive number because the digits can form an additive sequence: 1, 1, 2, 3, 5, 8.

1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
"199100199" is also an additive number, the additive sequence is: 1, 99, 100, 199.
1 + 99 = 100, 99 + 100 = 199
Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Follow up:
How would you handle overflow for very large input integers?

这道题的要求很多，例如这个结合序列必须最少有三个数，而且所有的有效数字都不能以‘0’作为开头。

其实做法比较直接，我们直接确定好两个开头的数字就可以做了。但follow up里面又问了一句，如果数字很大，该怎么控制溢出呢？简而言之，你将字符串
cast成整形的是肯定不可以的。那么大家会问，cast成长整形(long)可不可以？虽然cast成长整形是可以通过所有的test case，但毕竟长整形也是会
面临着溢出问题，也不是面试官想要考察的。那么我们在加和两个字符串的时候，就以生成新的字符串为结果，就可以防止溢出了。代码如下：

//插入所有method