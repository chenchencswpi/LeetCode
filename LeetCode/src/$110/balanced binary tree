Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which 
the depth of the two subtrees of every node never differ by more than 1.

给定一个二叉树，判断它是不是高度平衡。所谓的高度平衡，是对于每一个节点，其左子树的高度和右子树的高度相差不能超过1.

根据题意，我们很自然而然的想到对于某个节点，我们直接去比较左子树和右子树的高度差。代码如下：

//插入方法isBalanced1()和getHeight()

大家来分析一下这个方法。这个方法很不效率的地方就在与某些节点会被重复的调用getHeight()方法，尤其是叶节点。那么我们怎么
改进呢？改进的方法就在于改造getHeight函数。我们可以对它赋予另一项职能，也就是说，当以当前节点为根的子树不平衡，亦或是
左右任意子树不平衡，可以直接返回-1。当其父节点收到-1的返回值时，也可以直接返回-1即可。

//插入方法isBalanced2()和getHeight2()
