Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.

让我们写一个程序判断两个链表开始重合的地方。如果没有任何重合，返回null。不能破坏链表的原始结构，你可以假设链表是无环的。你的程序
时间复杂度最好是O(n)，并且只用O(1)的空间。

为什么题目说只能用O(1)的空间？是因为害怕大家用一个数据结构，比如哈希表，将一个链表存起来，然后去遍历另一个链表，找出共有的节点，那么第一个
共有的节点就是两个链表开始重合的地方了。那既然不能别的数据结构，我们仔细观察一下两个链表，它们最早开始重合的地方可能是哪儿呢？例如上面的例子，
a链表比b链表短，那么最早开始重合的地方就是a1了。那么我们需要将那个长的链表弄的和短的链表一样的长度，然后两个链表同时遍历，哪儿相同了，哪儿就是
它们重合的地方。

//插入方法getIntersectionNode()和getLength()